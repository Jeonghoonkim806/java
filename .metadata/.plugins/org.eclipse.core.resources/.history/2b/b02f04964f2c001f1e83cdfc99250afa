package com.student1;

import java.sql.*;
import java.util.*;

import com.student1.utils.DBManager;

public class Board1Service {
    Scanner scanner = new Scanner(System.in); // 키보드입력 받는 객체

    /**
     * 설명: 게시글 작성
     */
    public int insertBoard() {
        // 1. 게시글 제목 받기
        System.out.print("글제목(취소: quit): ");
        String title = scanner.nextLine();    // 키보드로 '글제목'받기
        if (title.equals("quit")) {
            System.out.println("작성이 취소되었습니다.");
            return -1;
        }

        // 2. 게시글 내용 받기
        System.out.print("글내용(취소: quit): ");
        String content = scanner.nextLine();  // 키보드로 '글내용'받기
        if (content.equals("quit")) {
            System.out.println("작성이 취소되었습니다.");
            return -1;
        }

        // 3. 위의 입력된 게시글의 제목과 내용을 받아서 Oracle DB에 저장할 수 있도록 DB접속준비
        Connection conn = DBManager.getDBConnection();

        // 4. Oracle DB에 데이터를 삽입하기 위해 insert sql문을 작성
        String insertSql = """
                INSERT INTO board(seq, title, content, read_count) 
                VALUES(seq_board_no.NEXTVAL, ?, ?, 0)
        """;

        int resultRows = 0;  // insert문을 실행한 뒤에 테이블 영향을 받은 행 개수
        PreparedStatement pstmt = null;

        try {
            // 5. Oracle DB에 데이터를 삽입 코드를 실행할 준비
            pstmt = conn.prepareStatement(insertSql);
            pstmt.setString(1, title);   // 위 insertSql에 첫번째?에 키보드로 입력받은 제목을 세팅 
            pstmt.setString(2, content); // 위 insertSql에 두번째?에 키보드로 입력받은 내용을 세팅

            // 6. 실제로 sql코드를 실행
            resultRows = pstmt.executeUpdate(); // executeUpdate로 insert, update, delete sql코드를 실행

            System.out.println("글 성공적으로 등록됨~");
        } catch(SQLException se) {
            System.out.println("게시글 삽입하는 도중 에러가 발생 -> " + se.getMessage());
        } finally {
            // 7. Oracle DB 접속 관련 객체들 정리
            DBManager.dbClose(conn, pstmt, null);
        }

        return resultRows;
    }

    /**
     * 설명: 게시글 목록조회
     */
    public void selectAllBoard() {
        // 게시판 목록조회 화면구성
        System.out.println("---------------------------------------------------------------------------");
        System.out.println("번호       제목                                   작성일               조회수   ");
        System.out.println("---------------------------------------------------------------------------");

        // Oracle DB의 Board테이블에서 위의 4가지 항목(번호, 제목, 작성일자, 조회)이 나오도록 출력
        // 1. 게시글의 데이터를 받기 위해 Oracle DB접속준비
        Connection conn = DBManager.getDBConnection();

        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        String selectSql = "SELECT seq, title, create_date, read_count FROM board ORDER BY seq DESC";
        
        try {
            pstmt = conn.prepareStatement(selectSql);
            rs = pstmt.executeQuery();

            while(rs.next()) {
                System.out.println(
                    String.format("%-10s", rs.getString("seq")) + 
                    String.format("%-30s", rs.getString("title")) + 
                    String.format("%-15s", rs.getDate("create_date")) + 
                    String.format("%10s", rs.getString("read_count"))
                );
            }
        } catch(SQLException se) {
            System.out.println("게시글 목록 조회하는 도중 에러가 발생 -> " + se.getMessage());
        } finally {
            // Oracle DB 접속 관련 객체들 정리
            DBManager.dbClose(conn, pstmt, rs);
        }
    }

    /**
     * 설명: 게시글 상세조회
     */
    public void selectOneBoard() {
        System.out.print("상세조회 할 게시판 번호를 입력하세요: ");
        int boardNo = scanner.nextInt();

        // 1. 게시글의 상세 데이터를 받기 위해 Oracle DB접속준비
        Connection conn = DBManager.getDBConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        // 2. 상세조회할 SQL 코드 작성
        String selectSql = "SELECT seq, title, content, create_date, read_count FROM board WHERE seq = ?";

        try {
            // 3. SQL 실행 준비
            pstmt = conn.prepareStatement(selectSql);
            pstmt.setInt(1, boardNo);

            // 4. SQL 실행
            rs = pstmt.executeQuery();

            // 5. SQL 실행해서 가져온 데이터들을 자바 변수에 세팅
            if (rs.next()) {
                int seq = rs.getInt("seq");
                String title = rs.getString("title");
                String content = rs.getString("content");
                String createDate = rs.getString("create_date");
                int readCount = rs.getInt("read_count");

                // 게시판 상세조회 출력 화면
                System.out.println("-------------------------------------------------------------");
                System.out.println("게시글 번호: " + seq);
                System.out.println("게시글 제목: " + title);
                System.out.println("게시글 내용: " + content);
                System.out.println("게시글 작성일: " + createDate);
                System.out.println("조회수: " + readCount);
                System.out.println("-------------------------------------------------------------");
            } else {
                System.out.println("해당 번호의 게시글이 존재하지 않습니다.");
            }
        } catch(SQLException se) {
            System.out.println("게시글 상세 조회하는 도중 에러가 발생 -> " + se.getMessage());
        } finally {
            // Oracle DB 접속 관련 객체들 정리
            DBManager.dbClose(conn, pstmt, rs);
        }
    }

    /**
     * 설명: 게시글 삭제
     */
    public void deleteBoard() {
        System.out.print("삭제할 글 번호를 입력하세요: ");
        int boardNo = scanner.nextInt();

        Connection conn = DBManager.getDBConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        
        String deleteSql = "DELETE FROM board WHERE seq = ?";

        try {
            pstmt = conn.prepareStatement(deleteSql);
            pstmt.setInt(1, boardNo);

            rs = pstmt.executeQuery();

            if (rs.next()) {
                System.out.println("글이 성공적으로 삭제되었습니다.");
            } else {
                System.out.println("해당 번호의 글이 존재하지 않습니다.");
            }
        } catch (SQLException se) {
            System.out.println("게시글 삭제 도중 에러가 발생 -> " + se.getMessage());
        } finally {
            DBManager.dbClose(conn, pstmt, rs);
    	
}

}

}